{"ts":1358783788990,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"doctors-pa\n==========\n\nOpen development of in patient task management application"]],"start1":0,"start2":0,"length1":0,"length2":81}]],"length":81}
{"contributors":[],"silentsave":false,"ts":1358783916223,"patch":[[{"diffs":[[0,"lication"],[1,"\n\nThis is a MongoDB and Node.js application using Socket.io and Express\n"]],"start1":73,"start2":73,"length1":8,"length2":80}]],"length":153,"saved":false}
{"contributors":[],"silentsave":false,"ts":1370659025133,"patch":[[{"diffs":[[0,"Express\n"],[1,"\nTo run it you have to have NodeJS and MongoDB installed on the machine.\nJust extract it and run it like any other ExpressJS app (execute 'node app').\nIt will listen o port 3000 and will connect to the local MongoDB and create a \"smart ward\" namespace.\n\nBefore we start it we have to create some users.\nWith your favorite text editor open app.js and go to line 57 and 58.\nThese are the routes to the pages responsible for adding new users.\nRemove the user.restrict_admin middleware calls so we can access the pages to create the first users.\n\nThe lines should look like this:\napp.get('/admin/users/add', users.admin.add);\napp.post('/admin/users/add', users.admin.add.post);\n\nStart the app.\nGo to /admin/users/add and create a few users of each type: administrators and regular ones.\nStop the app.\n\nRestore the previous lines to their original state and start it again.\nLog in with one of the administrator users. Create some wards and beds.\nLog out.\n\nLog with one of the regular users. Go to Patients -> Add (or /patients/add).\nAdd patients.\nBrowse around the app."]],"start1":145,"start2":145,"length1":8,"length2":1072}]],"length":1217,"saved":false}
